//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.4.0
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace PolRegio.Domain.Models.UmbracoCreate
{
	// Mixin content Type 1067 with alias "seo"
	/// <summary>SEO</summary>
	public partial interface ISeo : IPublishedContent
	{
		/// <summary>Meta description</summary>
		string MetaDescription { get; }

		/// <summary>Open Graph description</summary>
		string OgDescription { get; }

		/// <summary>Open Graph image</summary>
		string OgImage { get; }

		/// <summary>Open Graph title</summary>
		string OgTitle { get; }

		/// <summary>Page Title</summary>
		string PageTitle { get; }
	}

	/// <summary>SEO</summary>
	[PublishedContentModel("seo")]
	public partial class Seo : PublishedContentModel, ISeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "seo";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Seo(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Seo, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta description: Tekst zostanie dodany do meta description
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta description</summary>
		public static string GetMetaDescription(ISeo that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Open Graph description: Tekst zostanie dodany do og:Description
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return GetOgDescription(this); }
		}

		/// <summary>Static getter for Open Graph description</summary>
		public static string GetOgDescription(ISeo that) { return that.GetPropertyValue<string>("ogDescription"); }

		///<summary>
		/// Open Graph image: Ulr zostanie dodany do og:Image
		///</summary>
		[ImplementPropertyType("ogImage")]
		public string OgImage
		{
			get { return GetOgImage(this); }
		}

		/// <summary>Static getter for Open Graph image</summary>
		public static string GetOgImage(ISeo that) { return that.GetPropertyValue<string>("ogImage"); }

		///<summary>
		/// Open Graph title: Tekst zostanie dodany do og:Title
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return GetOgTitle(this); }
		}

		/// <summary>Static getter for Open Graph title</summary>
		public static string GetOgTitle(ISeo that) { return that.GetPropertyValue<string>("ogTitle"); }

		///<summary>
		/// Page Title: Tytuł strony wyświetlany an pasku w przeglądarce
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return GetPageTitle(this); }
		}

		/// <summary>Static getter for Page Title</summary>
		public static string GetPageTitle(ISeo that) { return that.GetPropertyValue<string>("pageTitle"); }
	}
}
